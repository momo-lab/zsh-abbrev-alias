#!/usr/bin/env zsh

typeset -g _ABBREV_ALIAS_VERSION='0.2.0'

typeset -Ag _abbrev_aliases

__abbrev_alias::magic_abbrev_expand() {
  emulate -L zsh -o extended_glob
  local MATCH
  LBUFFER=${LBUFFER%%(#m)[-_a-zA-Z0-9]#}
  local abbr=${_abbrev_aliases[$MATCH]}
  local kind=${${(s.\0.)abbr}[1]}
  local is_eval=${${(s.\0.)abbr}[2]}
  local newbuffer=${${(s.\0.)abbr}[3]:-$MATCH}
  if [[ $kind == "c" && ! ( $LBUFFER == "" || $LBUFFER =~ "(\\||;|&|\\$\\(|\`) ?$" ) ]]; then
    newbuffer=$MATCH
  fi
  if [[ "$is_eval" == "1" ]]; then
    newbuffer=$(eval "echo \"$newbuffer\"")
  fi
  LBUFFER+=$newbuffer
}

__abbrev_alias::magic_abbrev_expand_and_insert() {
    zle __abbrev_alias::magic_abbrev_expand
    zle self-insert
}

__abbrev_alias::magic_abbrev_expand_and_accept_line() {
    zle __abbrev_alias::magic_abbrev_expand
    zle accept-line
}

__abbrev_alias::no_magic_abbrev_expand() {
  LBUFFER+=' '
}

__abbrev_alias::init() {
  zle -N __abbrev_alias::magic_abbrev_expand
  zle -N __abbrev_alias::no_magic_abbrev_expand
  zle -N __abbrev_alias::magic_abbrev_expand_and_insert
  zle -N __abbrev_alias::magic_abbrev_expand_and_accept_line
  bindkey " "    __abbrev_alias::magic_abbrev_expand_and_insert
  bindkey "^M"   __abbrev_alias::magic_abbrev_expand_and_accept_line
  bindkey "^x "  __abbrev_alias::no_magic_abbrev_expand
  bindkey "^x^M" accept-line
}

__abbrev_alias::show() {
  local kind_filter=$1
  local key=$2
  local abbr=${_abbrev_aliases[$key]}
  test -n "$abbr" || return 1
  local kind=${${(s.\0.)abbr}[1]}
  local value=${${(s.\0.)abbr}[3]}
  if [[ $kind_filter == $kind ]]; then
    echo "$key='$value'"
  fi
  return 0
}

__abbrev_alias::list() {
  local kind_filters=$1
  for kind_filter in ${(s::)kind_filters}; do
    for key in ${(ko)_abbrev_aliases}; do
      __abbrev_alias::show $kind_filter $key
    done
  done
}

__abbrev_alias::version() {
  echo "abbrev-alias ${_ABBREV_ALIAS_VERSION}"
}

__abbrev_alias::help() {
  __abbrev_alias::version
  echo "usage: abbrev-alias [OPTIONS] {name=value ...}"
  echo "       abbrev-alias -u {name ...}"
  echo "       abbrev-alias --init"
  echo
  echo "options:"
  echo "  -c, --command   register alias as 'alias name=value'"
  echo "  -g, --global    register alias as 'alias -g name=value'"
  echo "  -e, --eval      evaluates subshells on expansion. "
  echo "  -u, --unset     unregister alias"
  echo "  -i, --init      initialize abbrev-alias. execute with .zshrc"
  echo "  -h, --help      show this help"
  echo "  -v, --version   show version"
}

__abbrev_alias::unregist() {
  local key=$1
  if [[ -n "${_abbrev_aliases[$key]}" ]]; then
    unalias $key
    unset "_abbrev_aliases[$key]"
  else
    echo "no such alias: $key" >&2
    return 1
  fi
}

__abbrev_alias::regist() {
  local kind=$1 is_eval=$2 key=${3%%=*} value=${3#*=}
  if [[ "$kind" == "f" ]]; then
    echo "WARN: -f option is deprecated. Use -g -e options." 1>&2
    echo "      ex) abbrev-alias -g -e $key='\$($value)'" 1>&2
    value="\$($value)"
    is_eval=1
    kind=g
  fi
  case "$kind" in
    g) alias -g $key="$value";;
    c) alias    $key="$value";;
  esac
  _abbrev_aliases[$key]="$kind\0$is_eval\0$value"
}

# option parse & execute
zparseopts -D -M -A opts -- \
  -init i=-init \
  -help h=-help \
  -version v=-version \
  -unset u=-unset \
  -command c=-command \
  -global g=-global \
  -function f=-function \
  -eval e=-eval

# init
if [[ -n ${opts[(i)--init]} ]]; then
  __abbrev_alias::init
  return 0
fi

# help
if [[ -n ${opts[(i)--help]} ]]; then
  __abbrev_alias::help
  return 0
fi

# version
if [[ -n ${opts[(i)--version]} ]]; then
  __abbrev_alias::version
  return 0
fi

# unregist
if [[ -n ${opts[(i)--unset]} ]]; then
  local result=0
  while [ $# -gt 0 ]; do
    __abbrev_alias::unregist "$1"
    test $? -ne 0 && result=1
    shift
  done
  return $result
fi

# set options
local kind
if [[ -n ${opts[(i)--command]} ]]; then
  kind=c
elif [[ -n ${opts[(i)--global]} ]]; then
  kind=g
elif [[ -n ${opts[(i)--function]} ]]; then
  kind=f
fi 
[[ ! -n ${opts[(i)--eval]} ]]; local is_eval=$?

#list
if [ $# -eq 0 ]; then
  __abbrev_alias::list ${kind:-gc}
  return 0
fi

# regist or show
local result=0
while [ $# -gt 0 ]; do
  if [[ "$1" =~ "=" ]]; then
    __abbrev_alias::regist ${kind:-c} $is_eval "$1"
  else
    __abbrev_alias::show ${kind:-c} $1
    test $? -ne 0 && result=1
  fi
  shift
done
return $result
